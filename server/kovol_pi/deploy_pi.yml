---
- name: Server Pi deploy
  hosts: server_pi
  vars_files:
    - ./variables/server_pi_var.yml
  vars:
    online: False
  become: true
  
  tasks:
    - name: Enable SSH keys
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ item }}"
      with_file:
       - ./files/steve_ssh.pub
       - ./files/gerdine_ssh.pub
       - ./files/philip_ssh.pub

    - name: disable ssh login for user pi
      lineinfile:
        dest=/etc/ssh/sshd_config
        line="DenyUsers pi"
        state=present
      notify:
       - Restart SSH

    - name: remove pi user
      user:
        name: pi
        state: absent
        remove: yes

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"
  
    - name: Set static IP on eth0
      template:
        src: ./templates/dhcpcd.j2
        dest: /etc/dhcpcd.conf
        owner: root
        mode: "0664"

    - name: Set hosts file
      template:
        src: ./templates/hosts.j2
        dest: /etc/hosts
        owner: root
        mode: "0644"

    - name: Update cache
      apt:
        update_cache: yes
      when: online

    - name: Upgrade all packages
      apt:
        upgrade: dist
      when: online

    - name: Install new packages
      apt:
        name: "{{ item }}"
        state: present
      when: online
      loop:
        - git
        - apache2
        - samba
        - duplicity
        - ufw
        - python3-pip
        - libopenjp2-7
        - libtiff5
        - libxslt-dev
        

    - name: Enable firewall
      ufw:
        state: enabled
        rule: allow
        name: "{{ item }}"
      loop:
        - ssh
        - samba
    - name: Enable ports for http/https
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
       - "80"
       - "443"
       
    - name: mount NAS sticks
      mount:
        path: "{{ item.mount_point }}"
        src: "{{ item.uuid }}"
        fstype: ntfs
        state: mounted
        opts: nofail,defaults
      loop:
        - { mount_point: "{{ nas_mount_point }}", uuid: "{{ stick1_uuid }}" }
        - { mount_point: "{{ nas_backup_mount_point }}", uuid: "{{ stick2_uuid }}" }
        
    - name: Add samba configuration
      template:
        src: ./templates/no_auth_samba.j2
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: "0644"
      notify:
        - Restart Samba
        
    - name: Create code folder
      file:
        path: "{{ code_folder }}"
        state: directory
        mode: "0777"

    - name: Create code/backup folder
      file:
        path: "{{ code_folder }}/backup"
        state: directory
        mode: "0777"
        owner: "{{ user }}"

    - name: Create log folder
      file:
        path: "/home/{{ user }}/server_logs"
        state: directory
        owner: "{{ user }}"
        mode: "0777"

    - name: Add backup script
      template:
        src: ./templates/backup.j2
        dest: "{{ code_folder }}/backup/backup.py"
        owner: "{{ user }}"
        mode: "0755"

    - name: Add backup filter file
      template:
        src: templates/backup_filter.j2
        dest: "{{ code_folder }}/backup/backup_filter.txt"
        owner: "{{ user }}"
        mode: "0644"
        
    - name: Schedule backup
      cron:
        name: backup
        user: "{{ user }}"
        state: present
        job: "python3 {{ code_folder }}/backup/backup.py"
        hour: "0"
        minute: "5"

    - name: Create CLAHub folder
      file:
        path: "{{ CLAHub_folder }}"
        #mode: "0777"
        state: directory
        #owner: "{{ user }}"
        recurse: yes
        
    - name: Create CLAHub symlink
      file:
        src: "{{ CLAHub_folder }}"
        dest: "{{ code_folder }}/CLAHub"
        #owner: "{{ user }}"
        state: link

    - name: Download CLAHub code
      git:
        repo: https://github.com/stevetasticsteve/CLA_Hub
        dest: "{{ CLAHub_folder }}"
        version: master
        force: yes
      when: online

    - name: Set CLAHub environment variables
      template:
       src: ./templates/CLAHub_environment_vars.j2
       dest: "{{ CLAHub_folder }}/.env"
       #mode: "0666"
       
    - name: Install virtualenv via pip
      pip:
        name: virtualenv
        executable: pip3
      when: online

    - name: Create CLAHub virtual environment
      pip:
        requirements: "{{ CLAHub_folder }}/requirements.txt"
        virtualenv: "{{ CLAHub_folder }}/venv"

    - name: Add CLAHub init
      template:
        src: ./templates/CLAHub_init.j2
        dest: "{{ CLAHub_folder }}/CLAHub_init.py"
        #mode: "0755"

    - name: CLAHub init
      command:
        cmd: python3 "{{ CLAHub_folder }}/CLAHub_init.py"
        creates: "{{ CLAHub_folder }}/static"

    - name: Configure Apache
      template:
        src: ./templates/apache_conf.j2
        dest: /etc/apache2/sites-available/000-default.conf
        owner: root
        mode: "0644"
      notify:
       - a2enmod proxy

    - name: Create CLAHub service
      template:
        src: ./templates/CLAHub_service.j2
        dest: /etc/systemd/system/CLAHub.service
        owner: root
        mode: "0644"

    - name: Enable CLAHub service
      systemd:
        daemon_reload: yes
        name: CLAHub
        state: started
        enabled: yes
      notify:
       - Restart Apache

    - name: Add CLAHub updater
      template:
        src: ./templates/CLAHub_update.j2
        dest: /usr/bin/update_CLAHub
        mode: "0755"
        

    - name: Create songs folder
      file:
        path: "{{ apache_folder }}/songs"
        state: directory
        #mode: "0644"
      notify:
       - Restart Apache
       
    - name: Move songs over
      copy:
        src: ./files/KovolSongbook.html
        dest: "{{ apache_folder }}/songs/KovolSongbook.html"
        #owner: "{{ user }}"
        #mode: "0644"

    - name: Create texts folder
      file:
        path: "{{ apache_folder }}/texts"
        state: directory
        #mode: "0644"
      notify:
       - Restart Apache  
       
    - name: Create Bootstrap folder
      file:
        path: "{{ code_folder }}/bootstrap"
        state: directory
        mode: "0777"
        owner: "{{ user }}"
        
    - name: extract bootstrap
      unarchive:
        src: ./files/bootstrap.zip
        dest: "{{ code_folder }}/bootstrap"
        owner: "{{ user }}"
        mode: "0777"
       
    - name: Create Jquery folder
      file:
        path: "{{ code_folder }}/jquery"
        state: directory
        mode: "0777"
        owner: "{{ user }}"
        
    - name: extract jquery
      unarchive:
        src: ./files/jquery.zip
        dest: "{{ code_folder }}/jquery"
        owner: "{{ user }}"
        mode: "0777"
       
    - name: Create Lexicon folder
      file:
        path: "{{ apache_folder }}/Lexicon"
        state: directory
        #mode: "0644"
      notify:
       - Restart Apache
       
    - name: Download Lexicon code
      git:
        repo: https://github.com/stevetasticsteve/Lexicon
        dest: "{{ code_folder }}/Lexicon"
        version: master
        force: yes
      when: online

    - name: Create Lexicon virtual environment
      pip:
        requirements: "{{ code_folder }}/Lexicon/requirements.txt"
        virtualenv: "{{ code_folder}}/Lexicon/venv"
      when: online

    - name: Set Lexicon config
      template:
        src: ./templates/lexicon_config.j2
        dest: "{{ code_folder }}/Lexicon/lexicon_config.py"
        mode: "0755"
        user: "{{ user }}"

    - name: Schedule Lexicon update
      cron:
        name: Lexicon update
        user: "{{ user }}"
        state: present
        job: "bash {{ code_folder }}/Lexicon/run_lexicon.sh"
        minute: "20"
        hour: "0"

    - name: Set Apache folder owner
      file:
        path: "{{ apache_folder }}"
        state: directory
        mode: "0777"
        owner: www-data
        recurse: yes
      notify:
       - Restart Apache

    - name: Create web page restart script
      template:
        src: "./templates/restart_services.j2"
        dest: /usr/bin/restart_services
        mode: "0755"
        
    - name: Allow restart script to run without sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        line: "{{ user }} ALL=(ALL) NOPASSWD:/usr/sbin/service smbd restart, /usr/sbin/service apache2 restart, /usr/bin/systemctl restart CLAHub"
        validate: 'visudo -cf %s'
        
    - name: Install health script
      template:
        src: ./templates/server_health.j2
        dest: "{{ code_folder }}/server_health.py"
        mode: "0755"
        owner: "{{ user }}"
        
    - name: schedule health check
      cron:
        name: Health check
        user: "{{ user }}"
        state: present
        job: "python3 {{ code_folder }}/server_health.py"
        minute: "55"
        
    - name: Download text code
      git:
        repo: https://github.com/stevetasticsteve/text_interlinear
        dest: "{{ code_folder }}/texts"
        version: master
        force: yes
      when: online
        
    - name: Install text script dependencies
      pip:
        requirements: "{{ code_folder }}/texts/requirements.txt"
        virtualenv: "{{ code_folder }}/texts/venv"
      when: online
        
    - name: Set text script settings
      template:
        src: "./templates/interlinear_settings.j2"
        dest: "{{ code_folder }}/texts/settings.py"
        mode: "0755"
        
    - name: Schedule text update
      cron:
        name: Texts update
        user: "{{ user }}"
        state: present
        job: "bash {{ code_folder }}/texts/run_interlinear.sh"
        minute: "20,40"
        
    - name: Add symlink for text audio
      file:
        src: "{{ texts_source }}/audio"
        dest: "{{ apache_folder }}/texts/audio"
        state: link

  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: reloaded
    - name: Restart Samba
      service:
        name: smbd
        state: reloaded
    - name: Restart Apache
      service:
        name: apache2
        state: reloaded
    - name: a2enmod proxy
      shell: a2enmod proxy_http
      notify:
        - Restart Apache
...
